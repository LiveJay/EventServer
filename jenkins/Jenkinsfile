node('') {
    final String branch = "publish-only-rework"
    final String composeDir = "/compose/eventserver"
    final String tag = "latest"
    final boolean testsEnabled = false
    final boolean deployEnabled = false

    final String gradlePath
    boolean skipTests = false
    boolean skipDeploy = false

    stage('Preparation') {
        checkout([$class                           : 'GitSCM',
                  branches                         : [[name: branch]],
                  extensions                       : [
                          [$class: 'CloneOption', shallow: true],
                  ],
                  userRemoteConfigs                : [
                          [url: 'https://github.com/UniverseProjects/EventServer.git']
                  ]
        ])
        sh "git rev-parse HEAD > .git/commit-id"
        String commitId = readFile('.git/commit-id')?.trim()

        sh "git log --format=%B -n 1 > .git/commit-message"
        String commitMessage = readFile('.git/commit-message')?.trim()
        skipTests = commitMessage.contains("[skip-tests]")
        skipDeploy = commitMessage.contains("[skip-deploy]")

        sh "cat > src/main/resources/build.properties << EOF\n" +
           "buildNumber=${env.BUILD_NUMBER}\n" +
           "gitCommit=${commitId}\n" +
           "gitBranch=${branch}\n" +
           "EOF"

        gradlePath = tool(name: 'gradle-3.2.1', type: 'gradle')
    }

    final boolean runTests = testsEnabled && !skipTests
    final boolean runDeploy = deployEnabled && !skipDeploy

    stage('Build') {
        String testStr = ""
        if (runTests) {
            println("Running tests")
            testStr = "cleanTest test"
        } else {
            println("Skipping tests")
        }
        try {
            sh "${gradlePath}/bin/gradle --no-daemon ${testStr} shadowJar"
        } catch (Exception ex) {
            slackSend color: "danger", message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} - 'Build' srage failed"
            throw ex
        } finally {
            if(runTests) {
                junit "build/test-results/test/*" as String
                publishHTML([reportDir: "build/reports/tests/test" as String,
                             reportFiles: "index.html",
                             reportName: "${name} Report" as String])
            }
        }
    }

    stage('Docker Image') {
        sh "cp build/libs/event-server.jar docker/eventServer.jar"
        dir('docker') {
            withCredentials([string(credentialsId: 'docker-registry-url', variable: 'dockerRegistry')]) {
                docker.withRegistry("https://${dockerRegistry}", "docker-registry-auth") {
                    def image = docker.build("event-server:$tag")
                    image.push()
                }
            }
        }
    }

    stage('Deploy') {
        if(runDeploy) {
            echo "Running deploy"
            //noinspection GroovyAssignabilityCheck
            withEnv(['RANCHER_URL=https://dev.universeprojects.com:8080']) {
                //noinspection GroovyAssignabilityCheck
                withCredentials([usernamePassword(credentialsId: 'rancher-event-servers', passwordVariable: 'RANCHER_SECRET_KEY', usernameVariable: 'RANCHER_ACCESS_KEY')]) {
                    sh "cd ${composeDir} && rancher-compose pull"
                    sh "cd ${composeDir} && rancher-compose up -d --force-upgrade --confirm-upgrade"
                }
            }
        } else {
            echo "Skipping deploy"
        }
    }
}